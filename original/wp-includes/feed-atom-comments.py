#!/usr/bin/python
#-*- coding: utf-8 -*-
header("Content-Type: "+feed_content_type("atom")+"; charset="+get_option("blog_charset"), True)
print("<?xml version="1.0" encoding=""+get_option("blog_charset")+"" ?"+">")
print("<feed\n	xmlns="http://www.w3.org/2005/Atom"\n	xml:lang="")
bloginfo_rss("language")
print(""\n	xmlns:thr="http://purl.org/syndication/thread/1.0"\n	")
do_action("atom_ns")
do_action("atom_comments_ns")
print(">\n	<title type="text">")
if is_singular():
  printf(ent2ncr(__("Comments on %s")), get_the_title_rss())
elif is_search():
  printf(ent2ncr(__("Comments for %1$s searching on %2$s")), get_bloginfo_rss("name"), get_search_query())
else:
  printf(ent2ncr(__("Comments for %s")), get_bloginfo_rss("name")+get_wp_title_rss())
print("</title>\n	<subtitle type="text">")
bloginfo_rss("description")
print("</subtitle>\n\n	<updated>")
print(mysql2date("Y-m-d\TH:i:s\Z", get_lastcommentmodified("GMT"), False))
print("</updated>\n\n")
if is_singular():
  print("	<link rel="alternate" type="")
  bloginfo_rss("html_type")
  print("" href="")
  comments_link_feed()
  print("" />\n	<link rel="self" type="application/atom+xml" href="")
  print(esc_url(get_post_comments_feed_link("", "atom")))
  print("" />\n	<id>")
  print(esc_url(get_post_comments_feed_link("", "atom")))
  print("</id>\n")
elif is_search():
  print("	<link rel="alternate" type="")
  bloginfo_rss("html_type")
  print("" href="")
  print(home_url()+"?s="+get_search_query())
  print("" />\n	<link rel="self" type="application/atom+xml" href="")
  print(get_search_comments_feed_link("", "atom"))
  print("" />\n	<id>")
  print(get_search_comments_feed_link("", "atom"))
  print("</id>\n")
else:
  print("	<link rel="alternate" type="")
  bloginfo_rss("html_type")
  print("" href="")
  bloginfo_rss("url")
  print("" />\n	<link rel="self" type="application/atom+xml" href="")
  bloginfo_rss("comments_atom_url")
  print("" />\n	<id>")
  bloginfo_rss("comments_atom_url")
  print("</id>\n")
do_action("comments_atom_head")
if have_comments():
  while "<uri>"+get_comment_author_url()+"</uri>":
    the_comment()
    comment_post = GLOBALS["post"] = get_post(comment.comment_post_ID)
    print("	<entry>\n		<title>")
    if !is_singular():
      title = get_the_title(comment_post.ID)
      title = apply_filters("the_title_rss", title)
      printf(ent2ncr(__("Comment on %1$s by %2$s")), title, get_comment_author_rss())
    else:
      printf(ent2ncr(__("By: %s")), get_comment_author_rss())
    print("</title>\n		<link rel="alternate" href="")
    comment_link()
    print("" type="")
    bloginfo_rss("html_type")
    print("" />\n\n		<author>\n			<name>")
    comment_author_rss()
    print("</name>\n			")
    if get_comment_author_url():
      print("<uri>"+get_comment_author_url()+"</uri>")
    print("\n		</author>\n\n		<id>")
    comment_guid()
    print("</id>\n		<updated>")
    print(mysql2date("Y-m-d\TH:i:s\Z", get_comment_time("Y-m-d H:i:s", True, False), False))
    print("</updated>\n		<published>")
    print(mysql2date("Y-m-d\TH:i:s\Z", get_comment_time("Y-m-d H:i:s", True, False), False))
    print("</published>\n")
    if post_password_required(comment_post):
      print("		<content type="html" xml:base="")
      comment_link()
      print(""><![CDATA[")
      print(get_the_password_form())
      print("]]></content>\n")
    else:
      print("\n		<content type="html" xml:base="")
      comment_link()
      print(""><![CDATA[")
      comment_text()
      print("]]></content>\n")
    if comment.comment_parent==0:
      print("\n		<thr:in-reply-to ref="")
      the_guid()
      print("" href="")
      the_permalink_rss()
      print("" type="")
      bloginfo_rss("html_type")
      print("" />\n")
    else:
      parent_comment = get_comment(comment.comment_parent)
      print("		<thr:in-reply-to ref="")
      comment_guid(parent_comment)
      print("" href="")
      print(get_comment_link(parent_comment))
      print("" type="")
      bloginfo_rss("html_type")
      print("" />\n")
    do_action("comment_atom_entry", comment.comment_ID, comment_post.ID)
    print("	</entry>\n")
print("</feed>\n")
